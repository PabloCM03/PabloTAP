package Class;

import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

//Clase que maneja la interfaz gráfica del cliente
public class VentanaC extends javax.swing.JFrame {
    
    ArrayList<String> usuariosEnLinea=new ArrayList<>();
    public String mensaje;

    /*
     * Constructor de la ventana.
     */
    public VentanaC() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String ip_puerto_nombre[]=getIP_Puerto_Nombre();
        String ip=ip_puerto_nombre[0];
        String puerto=ip_puerto_nombre[1];
        String nombre=ip_puerto_nombre[2];
        cliente=new Cliente(this, ip, Integer.valueOf(puerto), nombre);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHistorial = new javax.swing.JTextArea();
        txtMensaje = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtUsuariosLinea = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setDoubleBuffered(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(720, 492));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtHistorial.setEditable(false);
        txtHistorial.setBackground(new java.awt.Color(0, 204, 204));
        txtHistorial.setColumns(20);
        txtHistorial.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtHistorial.setForeground(new java.awt.Color(0, 0, 0));
        txtHistorial.setLineWrap(true);
        txtHistorial.setRows(5);
        txtHistorial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtHistorial.setDoubleBuffered(true);
        txtHistorial.setDragEnabled(true);
        txtHistorial.setFocusable(false);
        jScrollPane1.setViewportView(txtHistorial);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 72, 514, 373));

        txtMensaje.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMensaje.setForeground(new java.awt.Color(0, 0, 0));
        txtMensaje.setToolTipText("");
        txtMensaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMensajeKeyTyped(evt);
            }
        });
        jPanel1.add(txtMensaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 451, 510, 47));

        btnEnviar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/enviar.png"))); // NOI18N
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEnviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 450, 200, 47));

        jLabel2.setBackground(new java.awt.Color(51, 255, 51));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/live.png"))); // NOI18N
        jLabel2.setText("Usuarios en Línea");
        jLabel2.setToolTipText("");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(548, 14, -1, -1));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtUsuariosLinea.setEditable(false);
        txtUsuariosLinea.setBackground(new java.awt.Color(0, 153, 153));
        txtUsuariosLinea.setColumns(20);
        txtUsuariosLinea.setFont(new java.awt.Font("Barlow SemiBold", 0, 14)); // NOI18N
        txtUsuariosLinea.setForeground(new java.awt.Color(255, 255, 255));
        txtUsuariosLinea.setRows(5);
        txtUsuariosLinea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtUsuariosLinea.setDoubleBuffered(true);
        txtUsuariosLinea.setDragEnabled(true);
        txtUsuariosLinea.setFocusable(false);
        jScrollPane2.setViewportView(txtUsuariosLinea);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(532, 72, 200, 373));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 63, 744, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 744, 504));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed
    /**
     * Cuando la ventana se este cerrando se notifica al servidor que el cliente
     * se ha desconectado, por lo que los demás clientes del chat no podrán enviarle
     * más mensajes.
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cliente.confirmarDesconexion();
    }//GEN-LAST:event_formWindowClosing

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        
        if(txtMensaje.getText().equals("1") || txtMensaje.getText().equals("0")){
            
            txtHistorial.append("Yo: \n¿Cual es el factorial de " + txtMensaje.getText()+" ?\n");
            txtHistorial.append("El factorial es 1 \n");
            txtMensaje.setText("");
            
        }else{
            
            mensaje = txtMensaje.getText();
            cliente.enviarFactorial(mensaje);
            //cliente.enviarMensaje(mensaje);
            //se agrega en el historial de
            txtHistorial.append("Yo: \n ¿Cual es el factorial es: " + mensaje+" ?\n");
            txtMensaje.setText("");
        }
    }//GEN-LAST:event_btnEnviarActionPerformed

    //Metodo para asegurar que no se pase de tamaño el numero y que sean solo numeros
    private void txtMensajeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMensajeKeyTyped
        
        char validar = evt.getKeyChar();
        
        if (txtMensaje.getText().length()>=5) {
            evt.consume();
        }
        else{
            
            if(!Character.isDigit(validar)){
        
                evt.consume();
            }
        }
    }//GEN-LAST:event_txtMensajeKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea txtHistorial;
    private javax.swing.JTextField txtMensaje;
    public javax.swing.JTextArea txtUsuariosLinea;
    // End of variables declaration//GEN-END:variables
    /**
     * Constante que almacena el puerto por defecto para la aplicación.
     */
    private String DEFAULT_PORT="1024";
    /**
     * Constante que almacena la IP por defecto (localhost) para el servidor.
     */    
    private String DEFAULT_IP="127.0.0.1";
    /**
     * Constante que almacena el cliente, con el cual se gestiona la comunicación 
     * con el servidor.
     */
    private final Cliente cliente;
    /**
     * Agrega un contacto al JComboBox de contactos.
     * @param contacto 
     */
    void addContacto(String contacto) {
        
        usuariosEnLinea.add(contacto);
        txtUsuariosLinea.setText("");
        
        for(int i=0; i < usuariosEnLinea.size(); i++){
            
           txtUsuariosLinea.append(usuariosEnLinea.get(i) + "\n");  
        } 
    }
    
    /*
     * Agrega un nuevo mensaje al historial de la conversación.
     * @param emisor
     * @param mensaje 
     */
    void addMensaje(String emisor, String mensaje2) {
        
        if(!(cliente.getIdentificador().equals(emisor))){
            
            txtHistorial.append(emisor + " \n" + mensaje2+"\n");
        }
    }
    
    /**
     * Se configura el título de la ventana para una nueva sesión.
     * @param identificador 
     */
    void sesionIniciada(String identificador) {
        this.setTitle("En Línea "+identificador);
    }
    /**
     * Método que abre una ventana para que el usuario ingrese la IP del host en 
     * el que corre el servidor, el puerto con el que escucha y el nombre con el 
     * que quiere participar en el chat.
     * @return 
     */
    private String[] getIP_Puerto_Nombre() {
        String s[]=new String[3];
        s[0]=DEFAULT_IP;
        s[1]=DEFAULT_PORT;
        JTextField ip = new JTextField(20);
        JTextField puerto = new JTextField(20);
        JTextField usuario = new JTextField(20);
        ip.setText(DEFAULT_IP);
        puerto.setText(DEFAULT_PORT);
        usuario.setText("Nombre");
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new GridLayout(3, 2));
        myPanel.add(new JLabel("IP del Servidor:"));
        myPanel.add(ip);
        myPanel.add(new JLabel("Puerto de la conexión:"));
        myPanel.add(puerto);
        myPanel.add(new JLabel("Escriba su nombre:"));
        myPanel.add(usuario);        
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
                 "Configuraciones de la comunicación", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
                s[0]=ip.getText();
                s[1]=puerto.getText();
                s[2]=usuario.getText();
        }else{
            System.exit(0);
        }
        return s;
    }    
    
    /*
     * Método que elimina cierto cliente de la lista de contactos, este se llama
     * cuando cierto usuario cierra sesión.
     * @param identificador 
     */
    void eliminarContacto(String identificador) {
        
        for (int i = 0; i < usuariosEnLinea.size(); i++) {
            
            if(usuariosEnLinea.get(i).toString().equals(identificador)){
                usuariosEnLinea.remove(i);
            }  
        } 
        
        txtUsuariosLinea.setText("");
        for (int i = 0; i < usuariosEnLinea.size(); i++) {
            
            txtUsuariosLinea.append(usuariosEnLinea.get(i) +"\n");
        } 
        
        return;
    }
}